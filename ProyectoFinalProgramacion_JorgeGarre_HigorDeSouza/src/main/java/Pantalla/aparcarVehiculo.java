/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Pantalla;

import com.izv.proyectofinalprogramacion_jorgegarre_higordesouza.*;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author jorgegarre
 */
public class aparcarVehiculo extends javax.swing.JFrame {

    String matricula;
    String marca;
    String modelo;
    String color;
    String tipoVehiculo;
    String nombreCompleto;
    String dni;
    String tipoCombustible;
    int longitud;

    /**
     * Creates new form Prueba
     */
    public aparcarVehiculo() {
        initComponents();
    }

    private void limpiarCampos() {
        Matricula.setText("");
        Marca.setText("");
        Modelo.setText("");
        Color.setText("");
        Dni.setText("");
        NombreCompleto.setText("");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        VehiculoSelector = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        Matricula = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        Marca = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        Modelo = new javax.swing.JTextField();
        Color = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        checkCoche = new javax.swing.JRadioButton();
        jLabel7 = new javax.swing.JLabel();
        checkMoto = new javax.swing.JRadioButton();
        checkFurgoneta = new javax.swing.JRadioButton();
        Boton = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        NombreCompleto = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        Dni = new javax.swing.JTextField();
        inicioBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Helvetica Neue", 0, 24)); // NOI18N
        jLabel1.setText("¡Bienvenido al Parking!");

        jLabel2.setText("Introduce tu matrícula");

        Matricula.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MatriculaActionPerformed(evt);
            }
        });

        jLabel3.setText("Introduce la marca");

        Marca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MarcaActionPerformed(evt);
            }
        });

        jLabel4.setText("Introduce el modelo");

        Modelo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ModeloActionPerformed(evt);
            }
        });

        Color.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ColorActionPerformed(evt);
            }
        });

        jLabel5.setText("Introduce el color");

        VehiculoSelector.add(checkCoche);
        checkCoche.setText("Coche");
        checkCoche.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkCocheActionPerformed(evt);
            }
        });

        jLabel7.setText("Introduce tipo de Vehiculo");

        VehiculoSelector.add(checkMoto);
        checkMoto.setText("Moto");
        checkMoto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkMotoActionPerformed(evt);
            }
        });

        VehiculoSelector.add(checkFurgoneta);
        checkFurgoneta.setText("Furgoneta");
        checkFurgoneta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkFurgonetaActionPerformed(evt);
            }
        });

        Boton.setText("Crear Vehiculo");
        Boton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonActionPerformed(evt);
            }
        });

        jLabel6.setText("Introduce tu nombre Completo");

        NombreCompleto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NombreCompletoActionPerformed(evt);
            }
        });

        jLabel8.setText("Introduce DNI");

        Dni.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DniActionPerformed(evt);
            }
        });

        inicioBtn.setText("Volver al inicio");
        inicioBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inicioBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Matricula)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Marca)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Modelo)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Color)
                    .addComponent(checkCoche)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(checkMoto)
                    .addComponent(checkFurgoneta))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(Boton)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(NombreCompleto, javax.swing.GroupLayout.DEFAULT_SIZE, 119, Short.MAX_VALUE)
                                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(Dni))
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(inicioBtn)
                                        .addGap(102, 102, 102))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(138, 138, 138)
                        .addComponent(jLabel6)
                        .addGap(55, 55, 55))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Matricula, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(NombreCompleto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Marca, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Dni, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Modelo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel5)
                .addGap(5, 5, 5)
                .addComponent(Color, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(45, 45, 45)
                .addComponent(jLabel7)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(checkCoche)
                        .addGap(5, 5, 5)
                        .addComponent(checkMoto))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Boton)
                            .addComponent(inicioBtn))))
                .addGap(5, 5, 5)
                .addComponent(checkFurgoneta)
                .addContainerGap(134, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void MatriculaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MatriculaActionPerformed

    }//GEN-LAST:event_MatriculaActionPerformed

    private void MarcaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MarcaActionPerformed
    }//GEN-LAST:event_MarcaActionPerformed

    private void ModeloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ModeloActionPerformed
    }//GEN-LAST:event_ModeloActionPerformed

    private void ColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ColorActionPerformed
    }//GEN-LAST:event_ColorActionPerformed

    private void checkCocheActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkCocheActionPerformed
        tipoVehiculo = "COCHE";
    }//GEN-LAST:event_checkCocheActionPerformed

    private void checkMotoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkMotoActionPerformed
        tipoVehiculo = "MOTO";
    }//GEN-LAST:event_checkMotoActionPerformed

    private void checkFurgonetaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkFurgonetaActionPerformed
        tipoVehiculo = "FURGONETA";
    }//GEN-LAST:event_checkFurgonetaActionPerformed

    private void BotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonActionPerformed

        matricula = Matricula.getText();
        marca = Marca.getText();
        modelo = Modelo.getText();
        color = Color.getText();
        dni = Dni.getText();
        nombreCompleto = NombreCompleto.getText();

        switch (tipoVehiculo.toUpperCase()) {
            case "COCHE":
                SeleccionarCombustibleVehiculo pantalla = new SeleccionarCombustibleVehiculo(this, this);
                pantalla.setLocationRelativeTo(null);
                pantalla.setVisible(true);

                tipoCombustible = pantalla.getTipoCombustible();

                try {
                    Persona pepe = new Persona(nombreCompleto, dni);
                    Vehiculo coche;

                    switch (tipoCombustible.trim().toUpperCase()) {
                        case "GASOLINA":
                        case "DIESEL":
                            coche = new Combustion(tipoCombustible, matricula, pepe, marca, modelo, color);
                            break;
                        case "HIBRIDO TOTAL":
                            coche = new Hibrido_total(matricula, pepe, marca, modelo, color);
                            break;
                        case "HIBRIDO ENCHUFABLE":
                            coche = new Hibrido_enchufable(matricula, pepe, marca, modelo, color);
                            break;
                        default:
                            throw new BadCombustibleException("Tipo de combustible no válido: " + tipoCombustible);
                    }

                    Connection con = DriverManager.getConnection(
                            "jdbc:mysql://localhost:3306/GESTION_PARKING_HJ", "root", "");

                    String checkSql = "SELECT COUNT(*) FROM VEHICULOS_REGISTRADOS WHERE MATRICULA = ?";
                    PreparedStatement checkStmt = con.prepareStatement(checkSql);
                    checkStmt.setString(1, matricula);
                    ResultSet rsCheck = checkStmt.executeQuery();

                    if (rsCheck.next() && rsCheck.getInt(1) > 0) {
                        PantallaExcepciones excepcion = new PantallaExcepciones("Ya existe un vehículo registrado con la matrícula: " + matricula);
                        excepcion.setLocationRelativeTo(null);
                        excepcion.setVisible(true);
                        break;
                    }

                    String sqlVehiculo = "INSERT INTO VEHICULOS_REGISTRADOS (MATRICULA, COMBUSTIBLE, MARCA, MODELO, COLOR, NOMBRE_COMPLETO, DNI) "
                            + "VALUES (?, ?, ?, ?, ?, ?, ?)";
                    PreparedStatement psVehiculo = con.prepareStatement(sqlVehiculo);
                    psVehiculo.setString(1, coche.getMatricula());
                    psVehiculo.setString(2, tipoCombustible);
                    psVehiculo.setString(3, coche.getMarca());
                    psVehiculo.setString(4, coche.getModelo());
                    psVehiculo.setString(5, coche.getColor());
                    psVehiculo.setString(6, pepe.getNombreCompleto());
                    psVehiculo.setString(7, pepe.getDni());
                    psVehiculo.executeUpdate();

                    ElegirPlaza elegirPlaza = new ElegirPlaza(this);
                    elegirPlaza.setLocationRelativeTo(null);
                    elegirPlaza.setModal(true);
                    elegirPlaza.setVisible(true);

                    int plazaElegida = elegirPlaza.getPlazaSeleccionada();

                    // Validación de plaza
                    if (plazaElegida >= 21 && plazaElegida <= 34) {
                        PantallaExcepciones excepcion = new PantallaExcepciones("No puedes aparcar en una plaza de motos");
                        excepcion.setLocationRelativeTo(null);
                        excepcion.setVisible(true);
                        break;
                    }

                    boolean esElectrico = tipoCombustible.equalsIgnoreCase("ELECTRICO") || tipoCombustible.equalsIgnoreCase("HIBRIDO ENCHUFABLE");

                    double tarifa = esElectrico ? 2.00 : 1.50;
                    String tipoPlaza;

                    if (plazaElegida >= 1 && plazaElegida <= 20) {
                        tipoPlaza = "COCHE";
                    } else if (plazaElegida >= 35 && plazaElegida <= 40) {
                        tipoPlaza = "FURGONETA";
                        tarifa *= 2;  // tarifa doble por usar plaza de furgoneta
                        PantallaExcepciones aviso = new PantallaExcepciones("Has aparcado en una plaza de furgonetas. La tarifa se duplica.");
                        aviso.setLocationRelativeTo(null);
                        aviso.setVisible(true);
                    } else {
                        tipoPlaza = "DESCONOCIDA"; // por si hay otras plazas
                    }

                    String sqlAparcamiento = "INSERT INTO APARCAMIENTO (N_PLAZA, LIBRE, MATRICULA, TIPO_PLAZA, TARIFA_HORA, PLAZACARGADORELECTRICO) "
                            + "VALUES (?, FALSE, ?, ?, ?, ?)";
                    PreparedStatement psAparcamiento = con.prepareStatement(sqlAparcamiento);
                    psAparcamiento.setInt(1, plazaElegida);
                    psAparcamiento.setString(2, coche.getMatricula());
                    psAparcamiento.setString(3, tipoPlaza);
                    psAparcamiento.setDouble(4, tarifa);
                    psAparcamiento.setBoolean(5, esElectrico);

                    psAparcamiento.executeUpdate();
                    con.close();

                    System.out.println("Vehículo y plaza registrados correctamente.");
                    limpiarCampos();

                } catch (IncorrectNameException | BadDniException | BadMatriculaException | BadCombustibleException e) {
                    PantallaExcepciones pantallaExcept = new PantallaExcepciones(e.getMessage());
                    pantallaExcept.setVisible(true);
                    pantallaExcept.setLocationRelativeTo(null);
                } catch (SQLException e) {
                    e.printStackTrace();
                } catch (Exception ex) {
                    Logger.getLogger(aparcarVehiculo.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;

            case "MOTO":
                try {
                    Persona pepe = new Persona(nombreCompleto, dni);
                    Moto moto = new Moto(matricula, pepe, marca, modelo, color);

                    Connection con = DriverManager.getConnection(
                            "jdbc:mysql://localhost:3306/GESTION_PARKING_HJ", "root", "");

                    String checkSql = "SELECT COUNT(*) FROM VEHICULOS_REGISTRADOS WHERE MATRICULA = ?";
                    PreparedStatement checkStmt = con.prepareStatement(checkSql);
                    checkStmt.setString(1, matricula);
                    ResultSet rsCheck = checkStmt.executeQuery();

                    if (rsCheck.next() && rsCheck.getInt(1) > 0) {
                        PantallaExcepciones excepcion = new PantallaExcepciones("Ya existe un vehículo registrado con la matrícula: " + matricula);
                        excepcion.setLocationRelativeTo(null);
                        excepcion.setVisible(true);
                        break;
                    }

                    String sqlVehiculo = "INSERT INTO VEHICULOS_REGISTRADOS (MATRICULA, COMBUSTIBLE, MARCA, MODELO, COLOR, NOMBRE_COMPLETO, DNI) "
                            + "VALUES (?, ?, ?, ?, ?, ?, ?)";
                    PreparedStatement psVehiculo = con.prepareStatement(sqlVehiculo);
                    psVehiculo.setString(1, moto.getMatricula());
                    psVehiculo.setString(2, "MOTO"); // Puedes cambiar si tienes subtipos
                    psVehiculo.setString(3, moto.getMarca());
                    psVehiculo.setString(4, moto.getModelo());
                    psVehiculo.setString(5, moto.getColor());
                    psVehiculo.setString(6, pepe.getNombreCompleto());
                    psVehiculo.setString(7, pepe.getDni());

                    psVehiculo.executeUpdate();

                    // Elegir plaza
                    ElegirPlaza elegirPlaza = new ElegirPlaza(this);
                    elegirPlaza.setLocationRelativeTo(null);
                    elegirPlaza.setModal(true);
                    elegirPlaza.setVisible(true);

                    int plazaElegida = elegirPlaza.getPlazaSeleccionada();

                    // Validaciones de plaza
                    if (plazaElegida <= 21 && plazaElegida >= 34) {
                        PantallaExcepciones excepcion = new PantallaExcepciones("No puedes aparcar en una plaza que no sea de motos");
                        excepcion.setLocationRelativeTo(null);
                        excepcion.setVisible(true);
                        break;
                    }

                    // Registrar aparcamiento
                    String sqlAparcamiento = "INSERT INTO APARCAMIENTO (N_PLAZA, LIBRE, MATRICULA, TIPO_PLAZA, TARIFA_HORA, PLAZACARGADORELECTRICO) "
                            + "VALUES (?, FALSE, ?, ?, ?, ?)";
                    PreparedStatement psAparcamiento = con.prepareStatement(sqlAparcamiento);
                    psAparcamiento.setInt(1, plazaElegida);
                    psAparcamiento.setString(2, moto.getMatricula());
                    psAparcamiento.setString(3, "MOTO");
                    psAparcamiento.setDouble(4, 1.00); // Tarifa para motos
                    psAparcamiento.setBoolean(5, false);

                    psAparcamiento.executeUpdate();
                    con.close();

                    System.out.println("Moto y plaza registradas correctamente.");
                    limpiarCampos();

                } catch (IncorrectNameException | BadDniException | BadMatriculaException | SQLException e) {
                    PantallaExcepciones pantallaExcept = new PantallaExcepciones(e.getMessage());
                    pantallaExcept.setVisible(true);
                    pantallaExcept.setLocationRelativeTo(null);
                }
                break;

            case "FURGONETA":
                SeleccionarLongitudFurgoneta pantallaLongitud = new SeleccionarLongitudFurgoneta(this, this);
                pantallaLongitud.setLocationRelativeTo(null);
                pantallaLongitud.setVisible(true);

                longitud = pantallaLongitud.getLongitud();

                // Validación de longitud antes de continuar
                if (longitud > 400) {
                    PantallaExcepciones excepcion = new PantallaExcepciones("La furgoneta excede la longitud máxima permitida (400 cm).");
                    excepcion.setLocationRelativeTo(null);
                    excepcion.setVisible(true);
                    break;
                }

                try {
                    Persona pepe = new Persona(nombreCompleto, dni);
                    Furgoneta furgoneta = new Furgoneta(longitud, matricula, pepe, marca, modelo, color);

                    Connection con = DriverManager.getConnection(
                            "jdbc:mysql://localhost:3306/GESTION_PARKING_HJ", "root", "");

                    // Verificar si la matrícula ya existe
                    String checkSql = "SELECT COUNT(*) FROM VEHICULOS_REGISTRADOS WHERE MATRICULA = ?";
                    PreparedStatement checkStmt = con.prepareStatement(checkSql);
                    checkStmt.setString(1, matricula);
                    ResultSet rsCheck = checkStmt.executeQuery();

                    if (rsCheck.next() && rsCheck.getInt(1) > 0) {
                        PantallaExcepciones excepcion = new PantallaExcepciones("Ya existe un vehículo registrado con la matrícula: " + matricula);
                        excepcion.setLocationRelativeTo(null);
                        excepcion.setVisible(true);
                        con.close();
                        break;
                    }

                    // Elegir plaza
                    ElegirPlaza elegirPlaza = new ElegirPlaza(this);
                    elegirPlaza.setLocationRelativeTo(null);
                    elegirPlaza.setModal(true);
                    elegirPlaza.setVisible(true);

                    int plazaElegida = elegirPlaza.getPlazaSeleccionada();

                    // Validaciones de plaza
                    if (plazaElegida >= 21 && plazaElegida <= 34) {
                        PantallaExcepciones excepcion = new PantallaExcepciones("No puedes aparcar en una plaza de motos");
                        excepcion.setLocationRelativeTo(null);
                        excepcion.setVisible(true);
                        con.close();
                        break;
                    }

                    if (plazaElegida <= 20) {
                        PantallaExcepciones advertencia = new PantallaExcepciones("Has elegido una plaza para coches. Asegúrate de que tu furgoneta cabe correctamente.");
                        advertencia.setLocationRelativeTo(null);
                        advertencia.setVisible(true);
                        con.close();
                        break;
                    }

                    // Insertar vehículo
                    String sqlVehiculo = "INSERT INTO VEHICULOS_REGISTRADOS (MATRICULA, COMBUSTIBLE, MARCA, MODELO, COLOR, NOMBRE_COMPLETO, DNI) "
                            + "VALUES (?, ?, ?, ?, ?, ?, ?)";
                    PreparedStatement psVehiculo = con.prepareStatement(sqlVehiculo);
                    psVehiculo.setString(1, furgoneta.getMatricula());
                    psVehiculo.setString(2, "FURGONETA");
                    psVehiculo.setString(3, furgoneta.getMarca());
                    psVehiculo.setString(4, furgoneta.getModelo());
                    psVehiculo.setString(5, furgoneta.getColor());
                    psVehiculo.setString(6, pepe.getNombreCompleto());
                    psVehiculo.setString(7, pepe.getDni());
                    psVehiculo.executeUpdate();

                    // Insertar en aparcamiento
                    String sqlAparcamiento = "INSERT INTO APARCAMIENTO (N_PLAZA, LIBRE, MATRICULA, TIPO_PLAZA, TARIFA_HORA, PLAZACARGADORELECTRICO) "
                            + "VALUES (?, FALSE, ?, ?, ?, ?)";
                    PreparedStatement psAparcamiento = con.prepareStatement(sqlAparcamiento);
                    psAparcamiento.setInt(1, plazaElegida);
                    psAparcamiento.setString(2, furgoneta.getMatricula());
                    psAparcamiento.setString(3, "FURGONETA");
                    psAparcamiento.setDouble(4, 2.50); // Tarifa para furgoneta
                    psAparcamiento.setBoolean(5, false); // No tiene cargador eléctrico

                    psAparcamiento.executeUpdate();
                    con.close();

                    System.out.println("Furgoneta y plaza registradas correctamente.");
                    limpiarCampos();

                } catch (IncorrectNameException | BadDniException | BadMatriculaException | FurgonetaDeMayorLongitudException | SQLException e) {
                    PantallaExcepciones pantallaExcept = new PantallaExcepciones(e.getMessage());
                    pantallaExcept.setVisible(true);
                    pantallaExcept.setLocationRelativeTo(null);
                }
                break;

            default:
                System.out.println("Tipo de vehículo no reconocido: " + tipoVehiculo);
                break;
        }

    }//GEN-LAST:event_BotonActionPerformed

    private void DniActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DniActionPerformed
    }//GEN-LAST:event_DniActionPerformed

    private void NombreCompletoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NombreCompletoActionPerformed
    }//GEN-LAST:event_NombreCompletoActionPerformed

    private void inicioBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inicioBtnActionPerformed
        InicioScreen pantalla = new InicioScreen();
        pantalla.setVisible(true);
        pantalla.setLocationRelativeTo(null);
        this.dispose();    }//GEN-LAST:event_inicioBtnActionPerformed

    public void setTipoCombustible(String tipoCombustible) {
        this.tipoCombustible = tipoCombustible;
    }

    /**
     */
    public class Main {

        public static void main(String[] args) {
            javax.swing.SwingUtilities.invokeLater(() -> {
                aparcarVehiculo pantalla = new aparcarVehiculo();
                pantalla.setVisible(true);
                pantalla.setLocationRelativeTo(null); // Centrar ventana
            });
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Boton;
    private javax.swing.JTextField Color;
    private javax.swing.JTextField Dni;
    private javax.swing.JTextField Marca;
    private javax.swing.JTextField Matricula;
    private javax.swing.JTextField Modelo;
    private javax.swing.JTextField NombreCompleto;
    private javax.swing.ButtonGroup VehiculoSelector;
    private javax.swing.JRadioButton checkCoche;
    private javax.swing.JRadioButton checkFurgoneta;
    private javax.swing.JRadioButton checkMoto;
    private javax.swing.JButton inicioBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
